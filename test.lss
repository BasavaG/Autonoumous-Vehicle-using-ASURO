
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000720  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000794  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000143  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004b9  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e2  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000552  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a0  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001eb  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	64 c0       	rjmp	.+200    	; 0xd0 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	22 d0       	rcall	.+68     	; 0x88 <main>
  44:	6b c3       	rjmp	.+1750   	; 0x71c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <Stop>:
}

// Motor Stop
void Stop(void)
{
	MotorSpeed(0,0);
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	60 e0       	ldi	r22, 0x00	; 0
  4c:	52 d0       	rcall	.+164    	; 0xf2 <MotorSpeed>
}
  4e:	08 95       	ret

00000050 <turnRight>:
}

// Turn Right
void turnRight(void)
{
	MotorDir(FWD,RWD);
  50:	80 e2       	ldi	r24, 0x20	; 32
  52:	60 e1       	ldi	r22, 0x10	; 16
  54:	55 d0       	rcall	.+170    	; 0x100 <MotorDir>
	MotorSpeed(HALF_SPEED, FULL_SPEED);
  56:	80 e8       	ldi	r24, 0x80	; 128
  58:	6f ef       	ldi	r22, 0xFF	; 255
  5a:	4b d0       	rcall	.+150    	; 0xf2 <MotorSpeed>
}
  5c:	08 95       	ret

0000005e <turnLeft>:
}

// Turn Left
void turnLeft(void)
{
	MotorDir(RWD,FWD);
  5e:	80 e1       	ldi	r24, 0x10	; 16
  60:	60 e2       	ldi	r22, 0x20	; 32
  62:	4e d0       	rcall	.+156    	; 0x100 <MotorDir>
	MotorSpeed(FULL_SPEED,HALF_SPEED);
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	60 e8       	ldi	r22, 0x80	; 128
  68:	44 d0       	rcall	.+136    	; 0xf2 <MotorSpeed>
}
  6a:	08 95       	ret

0000006c <moveRwd>:
}

// Motor RWD
void moveRwd(void)
{
	MotorDir(RWD,RWD);
  6c:	80 e1       	ldi	r24, 0x10	; 16
  6e:	60 e1       	ldi	r22, 0x10	; 16
  70:	47 d0       	rcall	.+142    	; 0x100 <MotorDir>
	MotorSpeed(FULL_SPEED,FULL_SPEED);
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	6f ef       	ldi	r22, 0xFF	; 255
  76:	3d d0       	rcall	.+122    	; 0xf2 <MotorSpeed>
}
  78:	08 95       	ret

0000007a <moveFwd>:
#define ZERO_SPEED 0

// Motor FWD
void moveFwd(void)
{
	MotorDir(FWD,FWD);
  7a:	80 e2       	ldi	r24, 0x20	; 32
  7c:	60 e2       	ldi	r22, 0x20	; 32
  7e:	40 d0       	rcall	.+128    	; 0x100 <MotorDir>
	MotorSpeed(FULL_SPEED,FULL_SPEED);
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	6f ef       	ldi	r22, 0xFF	; 255
  84:	36 d0       	rcall	.+108    	; 0xf2 <MotorSpeed>
}
  86:	08 95       	ret

00000088 <main>:

/********* End - Motor library for autonomous robot *********/

/********* Start - Main loop *********/
int main (void)
{
  88:	1f 93       	push	r17
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
	Init();
  8e:	70 d0       	rcall	.+224    	; 0x170 <Init>

	// Auto Drive
	while(1)
	{
		
		sw = PollSwitch();
  90:	14 d1       	rcall	.+552    	; 0x2ba <PollSwitch>
  92:	18 2f       	mov	r17, r24
		
		if (sw == 0)	// normal condition, without any collision
  94:	88 23       	and	r24, r24
  96:	21 f4       	brne	.+8      	; 0xa0 <main+0x18>
		{
			moveFwd(); // robot moves in forward direction
  98:	f0 df       	rcall	.-32     	; 0x7a <moveFwd>
			StatusLED(GREEN);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	3a d0       	rcall	.+116    	; 0x112 <StatusLED>
  9e:	f8 cf       	rjmp	.-16     	; 0x90 <main+0x8>
}

// Motor Stop
void Stop(void)
{
	MotorSpeed(0,0);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	26 d0       	rcall	.+76     	; 0xf2 <MotorSpeed>
			
		}
		else if (sw>0)
		{
			Stop();	
			StatusLED(RED);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	34 d0       	rcall	.+104    	; 0x112 <StatusLED>
			if (sw & 0x08)	// Collision in left switches 
  aa:	c1 2f       	mov	r28, r17
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	13 fd       	sbrc	r17, 3
			{
				turnRight();	// robot moves in right direction
  b0:	cf df       	rcall	.-98     	; 0x50 <turnRight>
				
			}
			if (sw & 0x07)	// Collision in right switches
  b2:	c7 70       	andi	r28, 0x07	; 7
  b4:	d0 70       	andi	r29, 0x00	; 0
  b6:	cd 2b       	or	r28, r29
  b8:	09 f0       	breq	.+2      	; 0xbc <main+0x34>
			{
				turnLeft();	// robot moves in left direction
  ba:	d1 df       	rcall	.-94     	; 0x5e <turnLeft>
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0
				
			}
			for(i = 0; i < 280; i++) { Sleep(255); } 
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	3a d1       	rcall	.+628    	; 0x338 <Sleep>
  c4:	21 96       	adiw	r28, 0x01	; 1
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	c8 31       	cpi	r28, 0x18	; 24
  ca:	d8 07       	cpc	r29, r24
  cc:	c9 f7       	brne	.-14     	; 0xc0 <main+0x38>
  ce:	e0 cf       	rjmp	.-64     	; 0x90 <main+0x8>

000000d0 <__vector_3>:
volatile unsigned char count72kHz;

/* uses timer2 (36kHz for IR communication */
/* counts falling and rising edge => 36kHz*2 = 72kHz */
SIGNAL (SIG_OUTPUT_COMPARE2)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	count72kHz ++;
  dc:	80 91 60 00 	lds	r24, 0x0060
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 60 00 	sts	0x0060, r24
}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <MotorSpeed>:
}

/* Set motor speed */
inline void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9b bd       	out	0x2b, r25	; 43
  f6:	8a bd       	out	0x2a, r24	; 42
	OCR1B = right_speed;
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	79 bd       	out	0x29, r23	; 41
  fc:	68 bd       	out	0x28, r22	; 40
}
  fe:	08 95       	ret

00000100 <MotorDir>:

/* Set motor direction */
inline void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
 100:	92 b3       	in	r25, 0x12	; 18
 102:	9f 7c       	andi	r25, 0xCF	; 207
 104:	98 2b       	or	r25, r24
 106:	92 bb       	out	0x12, r25	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	8f 7c       	andi	r24, 0xCF	; 207
 10c:	86 2b       	or	r24, r22
 10e:	88 bb       	out	0x18, r24	; 24
}
 110:	08 95       	ret

00000112 <StatusLED>:
/* Status LED (OFF,GREEN,YELLOW,RED)*/
/* example code set StatusLED GREEN */
/* StatusLED(GREEN); */
inline void StatusLED(unsigned char color)
{
	if (color == OFF)    {GREEN_LED_OFF; RED_LED_OFF;}
 112:	88 23       	and	r24, r24
 114:	11 f4       	brne	.+4      	; 0x11a <StatusLED+0x8>
 116:	c0 98       	cbi	0x18, 0	; 24
 118:	03 c0       	rjmp	.+6      	; 0x120 <StatusLED+0xe>
	if (color == GREEN)  {GREEN_LED_ON; RED_LED_OFF;} 
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	19 f4       	brne	.+6      	; 0x124 <StatusLED+0x12>
 11e:	c0 9a       	sbi	0x18, 0	; 24
 120:	92 98       	cbi	0x12, 2	; 18
 122:	08 95       	ret
	if (color == YELLOW) {GREEN_LED_ON; RED_LED_ON;}
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	19 f4       	brne	.+6      	; 0x12e <StatusLED+0x1c>
 128:	c0 9a       	sbi	0x18, 0	; 24
 12a:	92 9a       	sbi	0x12, 2	; 18
 12c:	08 95       	ret
	if (color == RED)    {GREEN_LED_OFF; RED_LED_ON;}
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	11 f4       	brne	.+4      	; 0x136 <StatusLED+0x24>
 132:	c0 98       	cbi	0x18, 0	; 24
 134:	92 9a       	sbi	0x12, 2	; 18
 136:	08 95       	ret

00000138 <FrontLED>:
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
inline void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
 138:	92 b3       	in	r25, 0x12	; 18
 13a:	82 95       	swap	r24
 13c:	88 0f       	add	r24, r24
 13e:	88 0f       	add	r24, r24
 140:	80 7c       	andi	r24, 0xC0	; 192
 142:	9f 7b       	andi	r25, 0xBF	; 191
 144:	98 2b       	or	r25, r24
 146:	92 bb       	out	0x12, r25	; 18
}
 148:	08 95       	ret

0000014a <BackLED>:

/* function for Break LEDs */
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
 14a:	98 2f       	mov	r25, r24
	if (left || right) {
 14c:	88 23       	and	r24, r24
 14e:	11 f4       	brne	.+4      	; 0x154 <BackLED+0xa>
 150:	66 23       	and	r22, r22
 152:	49 f0       	breq	.+18     	; 0x166 <BackLED+0x1c>
		PORTD &= ~(1 << PD7); // Wheel LED OFF
 154:	97 98       	cbi	0x12, 7	; 18
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
 156:	84 b3       	in	r24, 0x14	; 20
 158:	83 60       	ori	r24, 0x03	; 3
 15a:	84 bb       	out	0x14, r24	; 20
		PORTC |= (1 << PC0) | (1 << PC1);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	85 bb       	out	0x15, r24	; 21
	}
	if (!left) PORTC &= ~(1 << PC1);
 162:	99 23       	and	r25, r25
 164:	09 f4       	brne	.+2      	; 0x168 <BackLED+0x1e>
 166:	a9 98       	cbi	0x15, 1	; 21
	if (!right) PORTC &= ~(1 << PC0);
 168:	66 23       	and	r22, r22
 16a:	09 f4       	brne	.+2      	; 0x16e <BackLED+0x24>
 16c:	a8 98       	cbi	0x15, 0	; 21
 16e:	08 95       	ret

00000170 <Init>:
/* Init function Processor will be initalized to work correctly */
void Init (void)
{
	//-------- seriell interface programmed in boot routine and already running -------
	//  prepare 36kHz for IR - Communication
	TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
 170:	89 e1       	ldi	r24, 0x19	; 25
 172:	85 bd       	out	0x25, r24	; 37
	OCR2  = 0x6E; // 36kHz @8MHz
 174:	8e e6       	ldi	r24, 0x6E	; 110
 176:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2); // 36kHz counter for sleep
 178:	89 b7       	in	r24, 0x39	; 57
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	89 bf       	out	0x39, r24	; 57
	
	// prepare RS232 
	UCSRA = 0x00;
 17e:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;	
 180:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
 182:	96 e8       	ldi	r25, 0x86	; 134
 184:	90 bd       	out	0x20, r25	; 32
	UBRRL = 0xCF; // 2400bps @ 8.00MHz
 186:	8f ec       	ldi	r24, 0xCF	; 207
 188:	89 b9       	out	0x09, r24	; 9
	
	// I/O Ports
	DDRB = IRTX | LEFT_DIR | PWM | GREEN_LED; 
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	87 bb       	out	0x17, r24	; 23
	DDRD = RIGHT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED;
 18e:	84 ef       	ldi	r24, 0xF4	; 244
 190:	81 bb       	out	0x11, r24	; 17
	
	// for PWM (8-Bit PWM) on OC1A & OC1B
	TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 192:	81 ea       	ldi	r24, 0xA1	; 161
 194:	8f bd       	out	0x2f, r24	; 47
	// tmr1 running on MCU clock/8 
	TCCR1B = (1 << CS11);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	8e bd       	out	0x2e, r24	; 46
	
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64 
 19a:	96 b9       	out	0x06, r25	; 6
	ODOMETRIE_LED_OFF;
 19c:	97 98       	cbi	0x12, 7	; 18
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
inline void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
 19e:	96 98       	cbi	0x12, 6	; 18
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64 
	ODOMETRIE_LED_OFF;

	FrontLED(OFF);
	BackLED(ON,ON);
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	d2 df       	rcall	.-92     	; 0x14a <BackLED>
	BackLED(OFF,OFF);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	cf df       	rcall	.-98     	; 0x14a <BackLED>
	StatusLED(GREEN);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	b1 df       	rcall	.-158    	; 0x112 <StatusLED>
}

/* Set motor direction */
inline void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
 1b0:	82 b3       	in	r24, 0x12	; 18
 1b2:	8f 7c       	andi	r24, 0xCF	; 207
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	82 bb       	out	0x12, r24	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	8f 7c       	andi	r24, 0xCF	; 207
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	88 bb       	out	0x18, r24	; 24
}

/* Set motor speed */
inline void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
 1c0:	1b bc       	out	0x2b, r1	; 43
 1c2:	1a bc       	out	0x2a, r1	; 42
	OCR1B = right_speed;
 1c4:	19 bc       	out	0x29, r1	; 41
 1c6:	18 bc       	out	0x28, r1	; 40
	BackLED(OFF,OFF);
	StatusLED(GREEN);
	
	MotorDir(FWD,FWD);
	MotorSpeed(0,0);
	sei();
 1c8:	78 94       	sei
}
 1ca:	08 95       	ret

000001cc <LineData>:
	if (!right) PORTC &= ~(1 << PC0);
}

/* function to read out line follow phototransistors (left,rigth) */
void LineData(unsigned int *data)
{
 1cc:	fc 01       	movw	r30, r24
	ADMUX = (1 << REFS0) | IR_LEFT;	// AVCC reference with external capacitor
 1ce:	83 e4       	ldi	r24, 0x43	; 67
 1d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 1d2:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 1d4:	34 9b       	sbis	0x06, 4	; 6
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <LineData+0x8>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 1d8:	34 9a       	sbi	0x06, 4	; 6
	data[0] = ADCL + (ADCH << 8);
 1da:	34 b1       	in	r19, 0x04	; 4
 1dc:	25 b1       	in	r18, 0x05	; 5
 1de:	92 2f       	mov	r25, r18
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	83 0f       	add	r24, r19
 1e4:	91 1d       	adc	r25, r1
 1e6:	91 83       	std	Z+1, r25	; 0x01
 1e8:	80 83       	st	Z, r24
	
	ADMUX = (1 << REFS0) | IR_RIGHT;	// AVCC reference with external capacitor
 1ea:	82 e4       	ldi	r24, 0x42	; 66
 1ec:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 1ee:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 1f0:	34 9b       	sbis	0x06, 4	; 6
 1f2:	fe cf       	rjmp	.-4      	; 0x1f0 <LineData+0x24>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 1f4:	34 9a       	sbi	0x06, 4	; 6
	data[1] = ADCL + (ADCH << 8);
 1f6:	34 b1       	in	r19, 0x04	; 4
 1f8:	25 b1       	in	r18, 0x05	; 5
 1fa:	92 2f       	mov	r25, r18
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	83 0f       	add	r24, r19
 200:	91 1d       	adc	r25, r1
 202:	93 83       	std	Z+3, r25	; 0x03
 204:	82 83       	std	Z+2, r24	; 0x02
}
 206:	08 95       	ret

00000208 <OdometrieData>:

/* function to read out odometrie phototransistors (left,rigth) */
void OdometrieData(unsigned int *data)
{
 208:	fc 01       	movw	r30, r24
	DDRC &= ~((1 << PC0) | (1 << PC1)); // Input => no break LED
 20a:	84 b3       	in	r24, 0x14	; 20
 20c:	8c 7f       	andi	r24, 0xFC	; 252
 20e:	84 bb       	out	0x14, r24	; 20
	ODOMETRIE_LED_ON;
 210:	97 9a       	sbi	0x12, 7	; 18
	
	ADMUX = (1 << REFS0) | WHEEL_LEFT; // AVCC reference with external capacitor
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 216:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 218:	34 9b       	sbis	0x06, 4	; 6
 21a:	fe cf       	rjmp	.-4      	; 0x218 <OdometrieData+0x10>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 21c:	34 9a       	sbi	0x06, 4	; 6
	data[0] = ADCL + (ADCH << 8);
 21e:	34 b1       	in	r19, 0x04	; 4
 220:	25 b1       	in	r18, 0x05	; 5
 222:	92 2f       	mov	r25, r18
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	83 0f       	add	r24, r19
 228:	91 1d       	adc	r25, r1
 22a:	91 83       	std	Z+1, r25	; 0x01
 22c:	80 83       	st	Z, r24
	
	ADMUX = (1 << REFS0) | WHEEL_RIGHT; // AVCC reference with external capacitor
 22e:	80 e4       	ldi	r24, 0x40	; 64
 230:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 232:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 234:	34 9b       	sbis	0x06, 4	; 6
 236:	fe cf       	rjmp	.-4      	; 0x234 <OdometrieData+0x2c>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 238:	34 9a       	sbi	0x06, 4	; 6
	data[1] = ADCL + (ADCH << 8);
 23a:	34 b1       	in	r19, 0x04	; 4
 23c:	25 b1       	in	r18, 0x05	; 5
 23e:	92 2f       	mov	r25, r18
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	83 0f       	add	r24, r19
 244:	91 1d       	adc	r25, r1
 246:	93 83       	std	Z+3, r25	; 0x03
 248:	82 83       	std	Z+2, r24	; 0x02
}
 24a:	08 95       	ret

0000024c <SerWrite>:

/* function for serial communication */
void SerWrite(unsigned char *data,unsigned char length)
{
	unsigned char i = 0;
	UCSRB = 0x08; // enable transmitter
 24c:	28 e0       	ldi	r18, 0x08	; 8
 24e:	2a b9       	out	0x0a, r18	; 10
 250:	fc 01       	movw	r30, r24
 252:	05 c0       	rjmp	.+10     	; 0x25e <SerWrite+0x12>
	while (length > 0) {
		if (UCSRA & 0x20) { // wait for empty transmit buffer
 254:	5d 9b       	sbis	0x0b, 5	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <SerWrite+0x8>
			UDR = data[i++];
 258:	81 91       	ld	r24, Z+
 25a:	8c b9       	out	0x0c, r24	; 12
			length --;
 25c:	61 50       	subi	r22, 0x01	; 1
/* function for serial communication */
void SerWrite(unsigned char *data,unsigned char length)
{
	unsigned char i = 0;
	UCSRB = 0x08; // enable transmitter
	while (length > 0) {
 25e:	66 23       	and	r22, r22
 260:	c9 f7       	brne	.-14     	; 0x254 <SerWrite+0x8>
		if (UCSRA & 0x20) { // wait for empty transmit buffer
			UDR = data[i++];
			length --;
		}
	}
	while (!(UCSRA & 0x40)); 
 262:	5e 9b       	sbis	0x0b, 6	; 11
 264:	fe cf       	rjmp	.-4      	; 0x262 <SerWrite+0x16>
	for (i = 0; i < 0xFE; i++)
		for(length = 0; length < 0xFE; length++); 
}
 266:	08 95       	ret

00000268 <SerRead>:

void SerRead(unsigned char *data, unsigned char length,unsigned int timeout)
{
 268:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	unsigned int  time = 0;
	UCSRB = 0x10; // enable receiver
 26a:	80 e1       	ldi	r24, 0x10	; 16
 26c:	8a b9       	out	0x0a, r24	; 10
	/* non blocking */
	if (timeout != 0) {
 26e:	41 15       	cp	r20, r1
 270:	51 05       	cpc	r21, r1
 272:	11 f4       	brne	.+4      	; 0x278 <SerRead+0x10>
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	1e c0       	rjmp	.+60     	; 0x2b4 <SerRead+0x4c>
 278:	df 01       	movw	r26, r30
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	05 c0       	rjmp	.+10     	; 0x288 <SerRead+0x20>
		while (i < length && time++ < timeout) {
			if (UCSRA & 0x80) {
 27e:	5f 9b       	sbis	0x0b, 7	; 11
 280:	07 c0       	rjmp	.+14     	; 0x290 <SerRead+0x28>
				data[i++] = UDR;
 282:	8c b1       	in	r24, 0x0c	; 12
 284:	8d 93       	st	X+, r24
 286:	7f 5f       	subi	r23, 0xFF	; 255
	unsigned char i = 0;
	unsigned int  time = 0;
	UCSRB = 0x10; // enable receiver
	/* non blocking */
	if (timeout != 0) {
		while (i < length && time++ < timeout) {
 288:	76 17       	cp	r23, r22
 28a:	b0 f4       	brcc	.+44     	; 0x2b8 <SerRead+0x50>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	c9 01       	movw	r24, r18
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	84 17       	cp	r24, r20
 29a:	95 07       	cpc	r25, r21
 29c:	80 f3       	brcs	.-32     	; 0x27e <SerRead+0x16>
			if (UCSRA & 0x80) {
				data[i++] = UDR;
				time = 0;
			}
		}
		if (time > timeout) data[0] = 'T';
 29e:	42 17       	cp	r20, r18
 2a0:	53 07       	cpc	r21, r19
 2a2:	50 f4       	brcc	.+20     	; 0x2b8 <SerRead+0x50>
 2a4:	84 e5       	ldi	r24, 0x54	; 84
 2a6:	80 83       	st	Z, r24
 2a8:	08 95       	ret
	}
	/* blocking */
	else {
		while (i < length) {
			if (UCSRA & 0x80) 
 2aa:	5f 9b       	sbis	0x0b, 7	; 11
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <SerRead+0x42>
				data[i++] = UDR;
 2ae:	8c b1       	in	r24, 0x0c	; 12
 2b0:	81 93       	st	Z+, r24
 2b2:	9f 5f       	subi	r25, 0xFF	; 255
		}
		if (time > timeout) data[0] = 'T';
	}
	/* blocking */
	else {
		while (i < length) {
 2b4:	96 17       	cp	r25, r22
 2b6:	c8 f3       	brcs	.-14     	; 0x2aa <SerRead+0x42>
 2b8:	08 95       	ret

000002ba <PollSwitch>:
/* function to read out switches */
unsigned char PollSwitch (void)
{
	unsigned int i;
	
	DDRD |= SWITCHES;				// Switches as Output
 2ba:	8b 9a       	sbi	0x11, 3	; 17
	SWITCH_ON;						// Output HIGH for measurement
 2bc:	93 9a       	sbi	0x12, 3	; 18
	ADMUX = (1 << REFS0) | SWITCH;	// AVCC reference with external capacitor
 2be:	84 e4       	ldi	r24, 0x44	; 68
 2c0:	87 b9       	out	0x07, r24	; 7
}

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
	count72kHz = 0;
 2c2:	10 92 60 00 	sts	0x0060, r1
	while (count72kHz < time72kHz);
 2c6:	80 91 60 00 	lds	r24, 0x0060
 2ca:	8a 30       	cpi	r24, 0x0A	; 10
 2cc:	e0 f3       	brcs	.-8      	; 0x2c6 <PollSwitch+0xc>
	DDRD |= SWITCHES;				// Switches as Output
	SWITCH_ON;						// Output HIGH for measurement
	ADMUX = (1 << REFS0) | SWITCH;	// AVCC reference with external capacitor
	Sleep(10);
	
	ADCSRA |= (1 << ADSC);			// Start conversion
 2ce:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));// wait for conversion complete
 2d0:	34 9b       	sbis	0x06, 4	; 6
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <PollSwitch+0x16>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 2d4:	34 9a       	sbi	0x06, 4	; 6
	i = ADCL + (ADCH << 8);
 2d6:	34 b1       	in	r19, 0x04	; 4
 2d8:	25 b1       	in	r18, 0x05	; 5
	
	SWITCH_OFF;
 2da:	93 98       	cbi	0x12, 3	; 18
 2dc:	72 2f       	mov	r23, r18
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	63 0f       	add	r22, r19
 2e2:	71 1d       	adc	r23, r1
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	28 d1       	rcall	.+592    	; 0x53a <__floatunsisf>
 2ea:	9b 01       	movw	r18, r22
 2ec:	ac 01       	movw	r20, r24
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	94 e4       	ldi	r25, 0x44	; 68
 2f6:	8d d0       	rcall	.+282    	; 0x412 <__divsf3>
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e8       	ldi	r20, 0x80	; 128
 2fe:	5f e3       	ldi	r21, 0x3F	; 63
 300:	23 d0       	rcall	.+70     	; 0x348 <__subsf3>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	4c e7       	ldi	r20, 0x7C	; 124
 308:	52 e4       	ldi	r21, 0x42	; 66
 30a:	a5 d1       	rcall	.+842    	; 0x656 <__mulsf3>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	5f e3       	ldi	r21, 0x3F	; 63
 314:	1a d0       	rcall	.+52     	; 0x34a <__addsf3>
 316:	e5 d0       	rcall	.+458    	; 0x4e2 <__fixunssfsi>
 318:	dc 01       	movw	r26, r24
 31a:	cb 01       	movw	r24, r22

	return  ((unsigned char) ((( 1024.0/(float)i - 1.0)) * 63.0 + 0.5));
}
 31c:	08 95       	ret

0000031e <StartSwitch>:

/* for working with Interrupt */
void StartSwitch(void)
{
	SWITCH_OFF;
 31e:	93 98       	cbi	0x12, 3	; 18
	DDRD &= ~SWITCHES;					// Switches as Input => ext. Int 1
 320:	8b 98       	cbi	0x11, 3	; 17
	MCUCR &= ~((1 << ISC11) | (1 << ISC10));// Low level generates interrupt
 322:	85 b7       	in	r24, 0x35	; 53
 324:	83 7f       	andi	r24, 0xF3	; 243
 326:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);					// Enable external Interrupt 1 
 328:	8b b7       	in	r24, 0x3b	; 59
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	8b bf       	out	0x3b, r24	; 59
}
 32e:	08 95       	ret

00000330 <StopSwitch>:

void StopSwitch(void)
{
	GICR &= ~(1 << INT1);
 330:	8b b7       	in	r24, 0x3b	; 59
 332:	8f 77       	andi	r24, 0x7F	; 127
 334:	8b bf       	out	0x3b, r24	; 59
}
 336:	08 95       	ret

00000338 <Sleep>:

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
 338:	98 2f       	mov	r25, r24
	count72kHz = 0;
 33a:	10 92 60 00 	sts	0x0060, r1
	while (count72kHz < time72kHz);
 33e:	80 91 60 00 	lds	r24, 0x0060
 342:	89 17       	cp	r24, r25
 344:	e0 f3       	brcs	.-8      	; 0x33e <Sleep+0x6>
}
 346:	08 95       	ret

00000348 <__subsf3>:
 348:	50 58       	subi	r21, 0x80	; 128

0000034a <__addsf3>:
 34a:	bb 27       	eor	r27, r27
 34c:	aa 27       	eor	r26, r26
 34e:	0e d0       	rcall	.+28     	; 0x36c <__addsf3x>
 350:	48 c1       	rjmp	.+656    	; 0x5e2 <__fp_round>
 352:	39 d1       	rcall	.+626    	; 0x5c6 <__fp_pscA>
 354:	30 f0       	brcs	.+12     	; 0x362 <__addsf3+0x18>
 356:	3e d1       	rcall	.+636    	; 0x5d4 <__fp_pscB>
 358:	20 f0       	brcs	.+8      	; 0x362 <__addsf3+0x18>
 35a:	31 f4       	brne	.+12     	; 0x368 <__addsf3+0x1e>
 35c:	9f 3f       	cpi	r25, 0xFF	; 255
 35e:	11 f4       	brne	.+4      	; 0x364 <__addsf3+0x1a>
 360:	1e f4       	brtc	.+6      	; 0x368 <__addsf3+0x1e>
 362:	2e c1       	rjmp	.+604    	; 0x5c0 <__fp_nan>
 364:	0e f4       	brtc	.+2      	; 0x368 <__addsf3+0x1e>
 366:	e0 95       	com	r30
 368:	e7 fb       	bst	r30, 7
 36a:	24 c1       	rjmp	.+584    	; 0x5b4 <__fp_inf>

0000036c <__addsf3x>:
 36c:	e9 2f       	mov	r30, r25
 36e:	4a d1       	rcall	.+660    	; 0x604 <__fp_split3>
 370:	80 f3       	brcs	.-32     	; 0x352 <__addsf3+0x8>
 372:	ba 17       	cp	r27, r26
 374:	62 07       	cpc	r22, r18
 376:	73 07       	cpc	r23, r19
 378:	84 07       	cpc	r24, r20
 37a:	95 07       	cpc	r25, r21
 37c:	18 f0       	brcs	.+6      	; 0x384 <__addsf3x+0x18>
 37e:	71 f4       	brne	.+28     	; 0x39c <__addsf3x+0x30>
 380:	9e f5       	brtc	.+102    	; 0x3e8 <__addsf3x+0x7c>
 382:	62 c1       	rjmp	.+708    	; 0x648 <__fp_zero>
 384:	0e f4       	brtc	.+2      	; 0x388 <__addsf3x+0x1c>
 386:	e0 95       	com	r30
 388:	0b 2e       	mov	r0, r27
 38a:	ba 2f       	mov	r27, r26
 38c:	a0 2d       	mov	r26, r0
 38e:	0b 01       	movw	r0, r22
 390:	b9 01       	movw	r22, r18
 392:	90 01       	movw	r18, r0
 394:	0c 01       	movw	r0, r24
 396:	ca 01       	movw	r24, r20
 398:	a0 01       	movw	r20, r0
 39a:	11 24       	eor	r1, r1
 39c:	ff 27       	eor	r31, r31
 39e:	59 1b       	sub	r21, r25
 3a0:	99 f0       	breq	.+38     	; 0x3c8 <__addsf3x+0x5c>
 3a2:	59 3f       	cpi	r21, 0xF9	; 249
 3a4:	50 f4       	brcc	.+20     	; 0x3ba <__addsf3x+0x4e>
 3a6:	50 3e       	cpi	r21, 0xE0	; 224
 3a8:	68 f1       	brcs	.+90     	; 0x404 <__addsf3x+0x98>
 3aa:	1a 16       	cp	r1, r26
 3ac:	f0 40       	sbci	r31, 0x00	; 0
 3ae:	a2 2f       	mov	r26, r18
 3b0:	23 2f       	mov	r18, r19
 3b2:	34 2f       	mov	r19, r20
 3b4:	44 27       	eor	r20, r20
 3b6:	58 5f       	subi	r21, 0xF8	; 248
 3b8:	f3 cf       	rjmp	.-26     	; 0x3a0 <__addsf3x+0x34>
 3ba:	46 95       	lsr	r20
 3bc:	37 95       	ror	r19
 3be:	27 95       	ror	r18
 3c0:	a7 95       	ror	r26
 3c2:	f0 40       	sbci	r31, 0x00	; 0
 3c4:	53 95       	inc	r21
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <__addsf3x+0x4e>
 3c8:	7e f4       	brtc	.+30     	; 0x3e8 <__addsf3x+0x7c>
 3ca:	1f 16       	cp	r1, r31
 3cc:	ba 0b       	sbc	r27, r26
 3ce:	62 0b       	sbc	r22, r18
 3d0:	73 0b       	sbc	r23, r19
 3d2:	84 0b       	sbc	r24, r20
 3d4:	ba f0       	brmi	.+46     	; 0x404 <__addsf3x+0x98>
 3d6:	91 50       	subi	r25, 0x01	; 1
 3d8:	a1 f0       	breq	.+40     	; 0x402 <__addsf3x+0x96>
 3da:	ff 0f       	add	r31, r31
 3dc:	bb 1f       	adc	r27, r27
 3de:	66 1f       	adc	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	88 1f       	adc	r24, r24
 3e4:	c2 f7       	brpl	.-16     	; 0x3d6 <__addsf3x+0x6a>
 3e6:	0e c0       	rjmp	.+28     	; 0x404 <__addsf3x+0x98>
 3e8:	ba 0f       	add	r27, r26
 3ea:	62 1f       	adc	r22, r18
 3ec:	73 1f       	adc	r23, r19
 3ee:	84 1f       	adc	r24, r20
 3f0:	48 f4       	brcc	.+18     	; 0x404 <__addsf3x+0x98>
 3f2:	87 95       	ror	r24
 3f4:	77 95       	ror	r23
 3f6:	67 95       	ror	r22
 3f8:	b7 95       	ror	r27
 3fa:	f7 95       	ror	r31
 3fc:	9e 3f       	cpi	r25, 0xFE	; 254
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__addsf3x+0x96>
 400:	b3 cf       	rjmp	.-154    	; 0x368 <__addsf3+0x1e>
 402:	93 95       	inc	r25
 404:	88 0f       	add	r24, r24
 406:	08 f0       	brcs	.+2      	; 0x40a <__addsf3x+0x9e>
 408:	99 27       	eor	r25, r25
 40a:	ee 0f       	add	r30, r30
 40c:	97 95       	ror	r25
 40e:	87 95       	ror	r24
 410:	08 95       	ret

00000412 <__divsf3>:
 412:	0c d0       	rcall	.+24     	; 0x42c <__divsf3x>
 414:	e6 c0       	rjmp	.+460    	; 0x5e2 <__fp_round>
 416:	de d0       	rcall	.+444    	; 0x5d4 <__fp_pscB>
 418:	40 f0       	brcs	.+16     	; 0x42a <__divsf3+0x18>
 41a:	d5 d0       	rcall	.+426    	; 0x5c6 <__fp_pscA>
 41c:	30 f0       	brcs	.+12     	; 0x42a <__divsf3+0x18>
 41e:	21 f4       	brne	.+8      	; 0x428 <__divsf3+0x16>
 420:	5f 3f       	cpi	r21, 0xFF	; 255
 422:	19 f0       	breq	.+6      	; 0x42a <__divsf3+0x18>
 424:	c7 c0       	rjmp	.+398    	; 0x5b4 <__fp_inf>
 426:	51 11       	cpse	r21, r1
 428:	10 c1       	rjmp	.+544    	; 0x64a <__fp_szero>
 42a:	ca c0       	rjmp	.+404    	; 0x5c0 <__fp_nan>

0000042c <__divsf3x>:
 42c:	eb d0       	rcall	.+470    	; 0x604 <__fp_split3>
 42e:	98 f3       	brcs	.-26     	; 0x416 <__divsf3+0x4>

00000430 <__divsf3_pse>:
 430:	99 23       	and	r25, r25
 432:	c9 f3       	breq	.-14     	; 0x426 <__divsf3+0x14>
 434:	55 23       	and	r21, r21
 436:	b1 f3       	breq	.-20     	; 0x424 <__divsf3+0x12>
 438:	95 1b       	sub	r25, r21
 43a:	55 0b       	sbc	r21, r21
 43c:	bb 27       	eor	r27, r27
 43e:	aa 27       	eor	r26, r26
 440:	62 17       	cp	r22, r18
 442:	73 07       	cpc	r23, r19
 444:	84 07       	cpc	r24, r20
 446:	38 f0       	brcs	.+14     	; 0x456 <__divsf3_pse+0x26>
 448:	9f 5f       	subi	r25, 0xFF	; 255
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	22 0f       	add	r18, r18
 44e:	33 1f       	adc	r19, r19
 450:	44 1f       	adc	r20, r20
 452:	aa 1f       	adc	r26, r26
 454:	a9 f3       	breq	.-22     	; 0x440 <__divsf3_pse+0x10>
 456:	33 d0       	rcall	.+102    	; 0x4be <__stack+0x5f>
 458:	0e 2e       	mov	r0, r30
 45a:	3a f0       	brmi	.+14     	; 0x46a <__stack+0xb>
 45c:	e0 e8       	ldi	r30, 0x80	; 128
 45e:	30 d0       	rcall	.+96     	; 0x4c0 <__stack+0x61>
 460:	91 50       	subi	r25, 0x01	; 1
 462:	50 40       	sbci	r21, 0x00	; 0
 464:	e6 95       	lsr	r30
 466:	00 1c       	adc	r0, r0
 468:	ca f7       	brpl	.-14     	; 0x45c <__divsf3_pse+0x2c>
 46a:	29 d0       	rcall	.+82     	; 0x4be <__stack+0x5f>
 46c:	fe 2f       	mov	r31, r30
 46e:	27 d0       	rcall	.+78     	; 0x4be <__stack+0x5f>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	bb 1f       	adc	r27, r27
 478:	26 17       	cp	r18, r22
 47a:	37 07       	cpc	r19, r23
 47c:	48 07       	cpc	r20, r24
 47e:	ab 07       	cpc	r26, r27
 480:	b0 e8       	ldi	r27, 0x80	; 128
 482:	09 f0       	breq	.+2      	; 0x486 <__stack+0x27>
 484:	bb 0b       	sbc	r27, r27
 486:	80 2d       	mov	r24, r0
 488:	bf 01       	movw	r22, r30
 48a:	ff 27       	eor	r31, r31
 48c:	93 58       	subi	r25, 0x83	; 131
 48e:	5f 4f       	sbci	r21, 0xFF	; 255
 490:	2a f0       	brmi	.+10     	; 0x49c <__stack+0x3d>
 492:	9e 3f       	cpi	r25, 0xFE	; 254
 494:	51 05       	cpc	r21, r1
 496:	68 f0       	brcs	.+26     	; 0x4b2 <__stack+0x53>
 498:	8d c0       	rjmp	.+282    	; 0x5b4 <__fp_inf>
 49a:	d7 c0       	rjmp	.+430    	; 0x64a <__fp_szero>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	ec f3       	brlt	.-6      	; 0x49a <__stack+0x3b>
 4a0:	98 3e       	cpi	r25, 0xE8	; 232
 4a2:	dc f3       	brlt	.-10     	; 0x49a <__stack+0x3b>
 4a4:	86 95       	lsr	r24
 4a6:	77 95       	ror	r23
 4a8:	67 95       	ror	r22
 4aa:	b7 95       	ror	r27
 4ac:	f7 95       	ror	r31
 4ae:	9f 5f       	subi	r25, 0xFF	; 255
 4b0:	c9 f7       	brne	.-14     	; 0x4a4 <__stack+0x45>
 4b2:	88 0f       	add	r24, r24
 4b4:	91 1d       	adc	r25, r1
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	97 f9       	bld	r25, 7
 4bc:	08 95       	ret
 4be:	e1 e0       	ldi	r30, 0x01	; 1
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	88 1f       	adc	r24, r24
 4c6:	bb 1f       	adc	r27, r27
 4c8:	62 17       	cp	r22, r18
 4ca:	73 07       	cpc	r23, r19
 4cc:	84 07       	cpc	r24, r20
 4ce:	ba 07       	cpc	r27, r26
 4d0:	20 f0       	brcs	.+8      	; 0x4da <__stack+0x7b>
 4d2:	62 1b       	sub	r22, r18
 4d4:	73 0b       	sbc	r23, r19
 4d6:	84 0b       	sbc	r24, r20
 4d8:	ba 0b       	sbc	r27, r26
 4da:	ee 1f       	adc	r30, r30
 4dc:	88 f7       	brcc	.-30     	; 0x4c0 <__stack+0x61>
 4de:	e0 95       	com	r30
 4e0:	08 95       	ret

000004e2 <__fixunssfsi>:
 4e2:	98 d0       	rcall	.+304    	; 0x614 <__fp_splitA>
 4e4:	88 f0       	brcs	.+34     	; 0x508 <__fixunssfsi+0x26>
 4e6:	9f 57       	subi	r25, 0x7F	; 127
 4e8:	90 f0       	brcs	.+36     	; 0x50e <__fixunssfsi+0x2c>
 4ea:	b9 2f       	mov	r27, r25
 4ec:	99 27       	eor	r25, r25
 4ee:	b7 51       	subi	r27, 0x17	; 23
 4f0:	a0 f0       	brcs	.+40     	; 0x51a <__fixunssfsi+0x38>
 4f2:	d1 f0       	breq	.+52     	; 0x528 <__fixunssfsi+0x46>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	88 1f       	adc	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	1a f0       	brmi	.+6      	; 0x504 <__fixunssfsi+0x22>
 4fe:	ba 95       	dec	r27
 500:	c9 f7       	brne	.-14     	; 0x4f4 <__fixunssfsi+0x12>
 502:	12 c0       	rjmp	.+36     	; 0x528 <__fixunssfsi+0x46>
 504:	b1 30       	cpi	r27, 0x01	; 1
 506:	81 f0       	breq	.+32     	; 0x528 <__fixunssfsi+0x46>
 508:	9f d0       	rcall	.+318    	; 0x648 <__fp_zero>
 50a:	b1 e0       	ldi	r27, 0x01	; 1
 50c:	08 95       	ret
 50e:	9c c0       	rjmp	.+312    	; 0x648 <__fp_zero>
 510:	67 2f       	mov	r22, r23
 512:	78 2f       	mov	r23, r24
 514:	88 27       	eor	r24, r24
 516:	b8 5f       	subi	r27, 0xF8	; 248
 518:	39 f0       	breq	.+14     	; 0x528 <__fixunssfsi+0x46>
 51a:	b9 3f       	cpi	r27, 0xF9	; 249
 51c:	cc f3       	brlt	.-14     	; 0x510 <__fixunssfsi+0x2e>
 51e:	86 95       	lsr	r24
 520:	77 95       	ror	r23
 522:	67 95       	ror	r22
 524:	b3 95       	inc	r27
 526:	d9 f7       	brne	.-10     	; 0x51e <__fixunssfsi+0x3c>
 528:	3e f4       	brtc	.+14     	; 0x538 <__fixunssfsi+0x56>
 52a:	90 95       	com	r25
 52c:	80 95       	com	r24
 52e:	70 95       	com	r23
 530:	61 95       	neg	r22
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	08 95       	ret

0000053a <__floatunsisf>:
 53a:	e8 94       	clt
 53c:	09 c0       	rjmp	.+18     	; 0x550 <__floatsisf+0x12>

0000053e <__floatsisf>:
 53e:	97 fb       	bst	r25, 7
 540:	3e f4       	brtc	.+14     	; 0x550 <__floatsisf+0x12>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	99 23       	and	r25, r25
 552:	a9 f0       	breq	.+42     	; 0x57e <__floatsisf+0x40>
 554:	f9 2f       	mov	r31, r25
 556:	96 e9       	ldi	r25, 0x96	; 150
 558:	bb 27       	eor	r27, r27
 55a:	93 95       	inc	r25
 55c:	f6 95       	lsr	r31
 55e:	87 95       	ror	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b7 95       	ror	r27
 566:	f1 11       	cpse	r31, r1
 568:	f8 cf       	rjmp	.-16     	; 0x55a <__floatsisf+0x1c>
 56a:	fa f4       	brpl	.+62     	; 0x5aa <__floatsisf+0x6c>
 56c:	bb 0f       	add	r27, r27
 56e:	11 f4       	brne	.+4      	; 0x574 <__floatsisf+0x36>
 570:	60 ff       	sbrs	r22, 0
 572:	1b c0       	rjmp	.+54     	; 0x5aa <__floatsisf+0x6c>
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	16 c0       	rjmp	.+44     	; 0x5aa <__floatsisf+0x6c>
 57e:	88 23       	and	r24, r24
 580:	11 f0       	breq	.+4      	; 0x586 <__floatsisf+0x48>
 582:	96 e9       	ldi	r25, 0x96	; 150
 584:	11 c0       	rjmp	.+34     	; 0x5a8 <__floatsisf+0x6a>
 586:	77 23       	and	r23, r23
 588:	21 f0       	breq	.+8      	; 0x592 <__floatsisf+0x54>
 58a:	9e e8       	ldi	r25, 0x8E	; 142
 58c:	87 2f       	mov	r24, r23
 58e:	76 2f       	mov	r23, r22
 590:	05 c0       	rjmp	.+10     	; 0x59c <__floatsisf+0x5e>
 592:	66 23       	and	r22, r22
 594:	71 f0       	breq	.+28     	; 0x5b2 <__floatsisf+0x74>
 596:	96 e8       	ldi	r25, 0x86	; 134
 598:	86 2f       	mov	r24, r22
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	2a f0       	brmi	.+10     	; 0x5aa <__floatsisf+0x6c>
 5a0:	9a 95       	dec	r25
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	da f7       	brpl	.-10     	; 0x5a0 <__floatsisf+0x62>
 5aa:	88 0f       	add	r24, r24
 5ac:	96 95       	lsr	r25
 5ae:	87 95       	ror	r24
 5b0:	97 f9       	bld	r25, 7
 5b2:	08 95       	ret

000005b4 <__fp_inf>:
 5b4:	97 f9       	bld	r25, 7
 5b6:	9f 67       	ori	r25, 0x7F	; 127
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	08 95       	ret

000005c0 <__fp_nan>:
 5c0:	9f ef       	ldi	r25, 0xFF	; 255
 5c2:	80 ec       	ldi	r24, 0xC0	; 192
 5c4:	08 95       	ret

000005c6 <__fp_pscA>:
 5c6:	00 24       	eor	r0, r0
 5c8:	0a 94       	dec	r0
 5ca:	16 16       	cp	r1, r22
 5cc:	17 06       	cpc	r1, r23
 5ce:	18 06       	cpc	r1, r24
 5d0:	09 06       	cpc	r0, r25
 5d2:	08 95       	ret

000005d4 <__fp_pscB>:
 5d4:	00 24       	eor	r0, r0
 5d6:	0a 94       	dec	r0
 5d8:	12 16       	cp	r1, r18
 5da:	13 06       	cpc	r1, r19
 5dc:	14 06       	cpc	r1, r20
 5de:	05 06       	cpc	r0, r21
 5e0:	08 95       	ret

000005e2 <__fp_round>:
 5e2:	09 2e       	mov	r0, r25
 5e4:	03 94       	inc	r0
 5e6:	00 0c       	add	r0, r0
 5e8:	11 f4       	brne	.+4      	; 0x5ee <__fp_round+0xc>
 5ea:	88 23       	and	r24, r24
 5ec:	52 f0       	brmi	.+20     	; 0x602 <__fp_round+0x20>
 5ee:	bb 0f       	add	r27, r27
 5f0:	40 f4       	brcc	.+16     	; 0x602 <__fp_round+0x20>
 5f2:	bf 2b       	or	r27, r31
 5f4:	11 f4       	brne	.+4      	; 0x5fa <__fp_round+0x18>
 5f6:	60 ff       	sbrs	r22, 0
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <__fp_round+0x20>
 5fa:	6f 5f       	subi	r22, 0xFF	; 255
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	8f 4f       	sbci	r24, 0xFF	; 255
 600:	9f 4f       	sbci	r25, 0xFF	; 255
 602:	08 95       	ret

00000604 <__fp_split3>:
 604:	57 fd       	sbrc	r21, 7
 606:	90 58       	subi	r25, 0x80	; 128
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	59 f0       	breq	.+22     	; 0x624 <__fp_splitA+0x10>
 60e:	5f 3f       	cpi	r21, 0xFF	; 255
 610:	71 f0       	breq	.+28     	; 0x62e <__fp_splitA+0x1a>
 612:	47 95       	ror	r20

00000614 <__fp_splitA>:
 614:	88 0f       	add	r24, r24
 616:	97 fb       	bst	r25, 7
 618:	99 1f       	adc	r25, r25
 61a:	61 f0       	breq	.+24     	; 0x634 <__fp_splitA+0x20>
 61c:	9f 3f       	cpi	r25, 0xFF	; 255
 61e:	79 f0       	breq	.+30     	; 0x63e <__fp_splitA+0x2a>
 620:	87 95       	ror	r24
 622:	08 95       	ret
 624:	12 16       	cp	r1, r18
 626:	13 06       	cpc	r1, r19
 628:	14 06       	cpc	r1, r20
 62a:	55 1f       	adc	r21, r21
 62c:	f2 cf       	rjmp	.-28     	; 0x612 <__fp_split3+0xe>
 62e:	46 95       	lsr	r20
 630:	f1 df       	rcall	.-30     	; 0x614 <__fp_splitA>
 632:	08 c0       	rjmp	.+16     	; 0x644 <__fp_splitA+0x30>
 634:	16 16       	cp	r1, r22
 636:	17 06       	cpc	r1, r23
 638:	18 06       	cpc	r1, r24
 63a:	99 1f       	adc	r25, r25
 63c:	f1 cf       	rjmp	.-30     	; 0x620 <__fp_splitA+0xc>
 63e:	86 95       	lsr	r24
 640:	71 05       	cpc	r23, r1
 642:	61 05       	cpc	r22, r1
 644:	08 94       	sec
 646:	08 95       	ret

00000648 <__fp_zero>:
 648:	e8 94       	clt

0000064a <__fp_szero>:
 64a:	bb 27       	eor	r27, r27
 64c:	66 27       	eor	r22, r22
 64e:	77 27       	eor	r23, r23
 650:	cb 01       	movw	r24, r22
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <__mulsf3>:
 656:	0b d0       	rcall	.+22     	; 0x66e <__mulsf3x>
 658:	c4 cf       	rjmp	.-120    	; 0x5e2 <__fp_round>
 65a:	b5 df       	rcall	.-150    	; 0x5c6 <__fp_pscA>
 65c:	28 f0       	brcs	.+10     	; 0x668 <__mulsf3+0x12>
 65e:	ba df       	rcall	.-140    	; 0x5d4 <__fp_pscB>
 660:	18 f0       	brcs	.+6      	; 0x668 <__mulsf3+0x12>
 662:	95 23       	and	r25, r21
 664:	09 f0       	breq	.+2      	; 0x668 <__mulsf3+0x12>
 666:	a6 cf       	rjmp	.-180    	; 0x5b4 <__fp_inf>
 668:	ab cf       	rjmp	.-170    	; 0x5c0 <__fp_nan>
 66a:	11 24       	eor	r1, r1
 66c:	ee cf       	rjmp	.-36     	; 0x64a <__fp_szero>

0000066e <__mulsf3x>:
 66e:	ca df       	rcall	.-108    	; 0x604 <__fp_split3>
 670:	a0 f3       	brcs	.-24     	; 0x65a <__mulsf3+0x4>

00000672 <__mulsf3_pse>:
 672:	95 9f       	mul	r25, r21
 674:	d1 f3       	breq	.-12     	; 0x66a <__mulsf3+0x14>
 676:	95 0f       	add	r25, r21
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	55 1f       	adc	r21, r21
 67c:	62 9f       	mul	r22, r18
 67e:	f0 01       	movw	r30, r0
 680:	72 9f       	mul	r23, r18
 682:	bb 27       	eor	r27, r27
 684:	f0 0d       	add	r31, r0
 686:	b1 1d       	adc	r27, r1
 688:	63 9f       	mul	r22, r19
 68a:	aa 27       	eor	r26, r26
 68c:	f0 0d       	add	r31, r0
 68e:	b1 1d       	adc	r27, r1
 690:	aa 1f       	adc	r26, r26
 692:	64 9f       	mul	r22, r20
 694:	66 27       	eor	r22, r22
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	66 1f       	adc	r22, r22
 69c:	82 9f       	mul	r24, r18
 69e:	22 27       	eor	r18, r18
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	62 1f       	adc	r22, r18
 6a6:	73 9f       	mul	r23, r19
 6a8:	b0 0d       	add	r27, r0
 6aa:	a1 1d       	adc	r26, r1
 6ac:	62 1f       	adc	r22, r18
 6ae:	83 9f       	mul	r24, r19
 6b0:	a0 0d       	add	r26, r0
 6b2:	61 1d       	adc	r22, r1
 6b4:	22 1f       	adc	r18, r18
 6b6:	74 9f       	mul	r23, r20
 6b8:	33 27       	eor	r19, r19
 6ba:	a0 0d       	add	r26, r0
 6bc:	61 1d       	adc	r22, r1
 6be:	23 1f       	adc	r18, r19
 6c0:	84 9f       	mul	r24, r20
 6c2:	60 0d       	add	r22, r0
 6c4:	21 1d       	adc	r18, r1
 6c6:	82 2f       	mov	r24, r18
 6c8:	76 2f       	mov	r23, r22
 6ca:	6a 2f       	mov	r22, r26
 6cc:	11 24       	eor	r1, r1
 6ce:	9f 57       	subi	r25, 0x7F	; 127
 6d0:	50 40       	sbci	r21, 0x00	; 0
 6d2:	8a f0       	brmi	.+34     	; 0x6f6 <__mulsf3_pse+0x84>
 6d4:	e1 f0       	breq	.+56     	; 0x70e <__mulsf3_pse+0x9c>
 6d6:	88 23       	and	r24, r24
 6d8:	4a f0       	brmi	.+18     	; 0x6ec <__mulsf3_pse+0x7a>
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	bb 1f       	adc	r27, r27
 6e0:	66 1f       	adc	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	91 50       	subi	r25, 0x01	; 1
 6e8:	50 40       	sbci	r21, 0x00	; 0
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <__mulsf3_pse+0x64>
 6ec:	9e 3f       	cpi	r25, 0xFE	; 254
 6ee:	51 05       	cpc	r21, r1
 6f0:	70 f0       	brcs	.+28     	; 0x70e <__mulsf3_pse+0x9c>
 6f2:	60 cf       	rjmp	.-320    	; 0x5b4 <__fp_inf>
 6f4:	aa cf       	rjmp	.-172    	; 0x64a <__fp_szero>
 6f6:	5f 3f       	cpi	r21, 0xFF	; 255
 6f8:	ec f3       	brlt	.-6      	; 0x6f4 <__mulsf3_pse+0x82>
 6fa:	98 3e       	cpi	r25, 0xE8	; 232
 6fc:	dc f3       	brlt	.-10     	; 0x6f4 <__mulsf3_pse+0x82>
 6fe:	86 95       	lsr	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f7 95       	ror	r31
 708:	e7 95       	ror	r30
 70a:	9f 5f       	subi	r25, 0xFF	; 255
 70c:	c1 f7       	brne	.-16     	; 0x6fe <__mulsf3_pse+0x8c>
 70e:	fe 2b       	or	r31, r30
 710:	88 0f       	add	r24, r24
 712:	91 1d       	adc	r25, r1
 714:	96 95       	lsr	r25
 716:	87 95       	ror	r24
 718:	97 f9       	bld	r25, 7
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
